export const getCourseDetail = () => {
    return {'course_title': 'Python Programming Fundamentals',
        'course_level': 'Beginner',
        'sections': [{'section_title': 'Introduction to Python',
          'subsections': [{'title': 'What is Python?',
            'content': '# Introduction to Python\n\nPython is a popular and versatile programming language that is known for its simplicity and readability. It was created in the early 1990s by Guido van Rossum and has since become one of the most widely used languages in the world.\n\n## What is Python?\n\nPython is a high-level programming language, which means that it abstracts away many of the complex details of the computer\'s hardware and operating system. This makes it easier for beginners to learn and understand. Python uses a simple and clean syntax, which makes it easy to read and write code.\n\nOne of the key features of Python is its versatility. It can be used for a wide range of tasks, from web development to data analysis to artificial intelligence. This makes it a great language to learn for anyone interested in programming.\n\nHere is a simple example of a Python program that prints "Hello, World!":\n\n```python\nprint("Hello, World!")\n```\n\nIn this example, the `print()` function is used to display the text "Hello, World!" on the screen. Python is known for its readability, and you can see that the code is straightforward and easy to understand.\n\nPython is also an interpreted language, which means that the code is executed line by line by the Python interpreter. This makes it easy to test and debug code, as you can see the results of each line of code immediately.\n\nOverall, Python is a powerful and beginner-friendly programming language that is widely used in the tech industry. Whether you are interested in web development, data science, or any other field, learning Python is a great first step in your programming journey.'},
           {'title': 'Setting up Python environment',
            'content': 'Welcome to the world of Python programming! Before you can start coding in Python, you need to set up your Python environment. This includes installing Python on your computer and choosing a code editor or Integrated Development Environment (IDE) to write and run your Python code.\n\nInstalling Python:\n1. Go to the official Python website (https://www.python.org/) and download the latest version of Python for your operating system (Windows, macOS, or Linux).\n2. Run the installer and follow the on-screen instructions to install Python on your computer.\n3. Once the installation is complete, you can verify that Python is installed by opening a command prompt (Windows) or terminal (macOS/Linux) and typing ```python --version```. This command should display the version of Python you have installed.\n\nChoosing a code editor:\nThere are many code editors and IDEs available for Python programming. Some popular choices include:\n1. Visual Studio Code (https://code.visualstudio.com/)\n2. PyCharm (https://www.jetbrains.com/pycharm/)\n3. Sublime Text (https://www.sublimetext.com/)\n\nYou can choose any editor that you feel comfortable with. Visual Studio Code is a popular choice among beginners due to its user-friendly interface and extensive features for Python development.\n\nSetting up a Python project:\nOnce you have installed Python and chosen a code editor, you can start setting up your Python project. Create a new folder on your computer for your Python files and open it in your code editor. You can create a new Python file with a ```.py``` extension, for example, ```hello.py```.\n\nWriting your first Python program:\nNow that your environment is set up, let\'s write a simple Python program to print "Hello, World!":\n```python\nprint("Hello, World!")\n```\nSave the file and run it from your code editor. You should see the output "Hello, World!" printed to the console.\n\nCongratulations! You have successfully set up your Python environment and written your first Python program. Stay tuned for more lessons on Python programming fundamentals.'},
           {'title': 'Basic syntax and variables',
            'content': '# Introduction to Python\n\nPython is a popular and versatile programming language known for its simplicity and readability. In this section, we will cover the basics of Python programming, starting with understanding the basic syntax and variables.\n\n## Basic Syntax\n\nPython is known for its clean and easy-to-read syntax, making it a great choice for beginners. Here are a few key points to remember about Python syntax:\n\n1. **Indentation**: Python uses indentation to define code blocks, unlike other programming languages that use curly braces. It is important to maintain consistent indentation to ensure your code runs correctly.\n\n2. **Comments**: Comments in Python are denoted by the `#` symbol. Comments are ignored by the Python interpreter and are used to add explanatory notes to your code.\n\n3. **Print Statement**: The `print()` function is used to display output in Python. You can print text, numbers, variables, and expressions using the `print()` function.\n\n## Variables\n\nVariables are used to store data in Python. You can think of variables as containers that hold values. Here are a few important points to remember about variables:\n\n1. **Naming Variables**: Variable names should be descriptive and meaningful. They can contain letters, numbers, and underscores, but cannot start with a number.\n\n2. **Assigning Values**: You can assign a value to a variable using the assignment operator `=`. For example, `x = 5` assigns the value `5` to the variable `x`.\n\n3. **Data Types**: Python supports various data types such as integers, floats (decimal numbers), strings (text), lists, dictionaries, and more. The data type of a variable is automatically determined based on the value assigned to it.\n\n### Examples:\n\n```python\n# Example of variable assignment\nx = 5\ny = "Hello, Python!"\n\n# Printing the values of variables\nprint(x)  # Output: 5\nprint(y)  # Output: Hello, Python!\n```\n\nBy understanding the basic syntax and variables in Python, you will be well on your way to writing your first Python programs. Practice writing simple programs using variables to solidify your understanding.'}]},
         {'section_title': 'Data Types in Python',
          'subsections': [{'title': 'Numbers and arithmetic operations',
            'content': "In Python, numbers are one of the fundamental data types used for performing arithmetic operations. There are mainly three types of numbers in Python: integers, floating-point numbers, and complex numbers.\n\nIntegers are whole numbers without any decimal point, such as 5, -10, or 100. Floating-point numbers, also known as floats, are numbers with a decimal point or an exponent, like 3.14, -0.5, or 2.0. Complex numbers have a real part and an imaginary part, represented as `a + bj`, where `a` is the real part and `b` is the imaginary part.\n\nArithmetic operations can be performed on numbers in Python using various operators:\n\n- Addition `+`: Adds two numbers together.\n- Subtraction `-`: Subtracts one number from another.\n- Multiplication `*`: Multiplies two numbers.\n- Division `/`: Divides one number by another, returning a float.\n- Floor Division `//`: Divides one number by another, returning an integer (truncates the decimal part).\n- Modulus `%`: Returns the remainder of the division of two numbers.\n- Exponentiation `**`: Raises one number to the power of another.\n\nLet's look at some examples of using these arithmetic operators in Python:\n\n```python\n# Addition\nresult = 5 + 3\nprint(result)  # Output: 8\n\n# Subtraction\nresult = 10 - 2\nprint(result)  # Output: 8\n\n# Multiplication\nresult = 4 * 6\nprint(result)  # Output: 24\n\n# Division\nresult = 15 / 4\nprint(result)  # Output: 3.75\n\n# Floor Division\nresult = 15 // 4\nprint(result)  # Output: 3\n\n# Modulus\nresult = 15 % 4\nprint(result)  # Output: 3\n\n# Exponentiation\nresult = 2 ** 3\nprint(result)  # Output: 8\n```\n\nBy understanding these basic arithmetic operations and the different types of numbers in Python, you can start manipulating and performing calculations with numbers in your programs. Experiment with these operations and get comfortable with using numbers in Python programming!"},
           {'title': 'Strings and string manipulation',
            'content': 'In Python, strings are a fundamental data type used to represent text. A string is simply a sequence of characters enclosed in single quotes (\'\'), double quotes ("") or triple quotes (\'\'\' or """). For example, \'hello\', "Python", and \'\'\'This is a string\'\'\' are all valid strings in Python.\n\nOne of the most common operations you can perform on strings is string manipulation. This involves changing, combining, or extracting parts of a string. There are several built-in functions and methods in Python that make string manipulation easy.\n\nHere are some common operations you can perform on strings:\n\n1. Concatenation: You can combine two or more strings together using the \'+\' operator. For example:\n```python\nfirst_name = \'John\'\nlast_name = \'Doe\'\nfull_name = first_name + \' \' + last_name\nprint(full_name)  # Output: John Doe\n```\n\n2. Length: You can find the length of a string using the `len()` function. For example:\n```python\ntext = \'Hello, World!\'\nprint(len(text))  # Output: 13\n```\n\n3. Slicing: You can extract a portion of a string by specifying a range of indices. For example:\n```python\ntext = \'Python Programming\'\nprint(text[7:18])  # Output: Programming\n```\n\n4. Upper and Lowercase: You can convert a string to uppercase or lowercase using the `upper()` and `lower()` methods. For example:\n```python\ntext = \'Hello, World!\'\nprint(text.upper())  # Output: HELLO, WORLD!\nprint(text.lower())  # Output: hello, world!\n```\n\n5. Finding Substrings: You can check if a certain substring exists in a string using the `in` keyword. For example:\n```python\ntext = \'Python is awesome\'\nprint(\'Python\' in text)  # Output: True\nprint(\'Java\' in text)  # Output: False\n```\n\nBy mastering string manipulation techniques, you can perform a wide range of tasks in Python such as text processing, data extraction, and more. Practice these operations and explore the many other string methods available in Python to become proficient in working with strings.'},
           {'title': 'Lists and tuples',
            'content': 'In Python, lists and tuples are two important data types that allow you to store multiple values in a single variable. Both lists and tuples can hold a collection of items, such as numbers, strings, or even other lists.\n\n### Lists\nA list in Python is defined by enclosing the elements in square brackets `[ ]`. Lists are mutable, which means you can change, add, or remove elements from a list after it has been created. Here\'s an example of how you can create a list in Python:\n\n```python\nfruits = ["apple", "banana", "cherry", "date"]\n```\n\nYou can access individual elements in a list by their index. Remember, indexing in Python starts at 0. For example, to access the second element in the `fruits` list, you would use `fruits[1]`.\n\n### Tuples\nTuples are similar to lists, but they are defined by enclosing the elements in parentheses `( )`. Tuples are immutable, which means once a tuple is created, you cannot change its elements. Here\'s an example of how you can create a tuple in Python:\n\n```python\ncolors = ("red", "green", "blue")\n```\n\nYou can access elements in a tuple in the same way as you would with a list, using their index. Tuples are often used when you want to ensure that the data remains constant and cannot be modified accidentally.\n\n### Key Differences\nThe main difference between lists and tuples is their mutability. Lists can be changed, while tuples are fixed. If you need to store data that should not be modified, a tuple is the better choice. However, if you anticipate needing to modify the data, a list would be more appropriate.\n\nIn summary, lists and tuples are essential data types in Python for storing multiple values. Lists are mutable and defined with square brackets, while tuples are immutable and defined with parentheses. Understanding when to use each type will help you write more efficient and organized code.'}]},
         {'section_title': 'Control Flow in Python',
          'subsections': [{'title': 'Conditional statements',
            'content': 'Conditional statements are a crucial part of programming as they allow the computer to make decisions based on certain conditions. In Python, we use conditional statements to execute specific blocks of code depending on whether a certain condition is true or false. The most common types of conditional statements in Python are if, elif, and else statements.\n\nThe \'if\' statement is used to check if a condition is true and execute a block of code if it is. Here\'s an example:\n\n```python\nx = 10\nif x > 5:\n    print("x is greater than 5")\n```\n\nIn this example, the code inside the if block will only be executed if the condition x > 5 is true.\n\nThe \'elif\' statement stands for "else if" and is used to check multiple conditions. If the condition in the \'if\' statement is false, the program moves on to the \'elif\' statement to check another condition. Here\'s an example:\n\n```python\ny = 3\nif y > 5:\n    print("y is greater than 5")\nelif y < 5:\n    print("y is less than 5")\n```\n\nIn this example, if the condition y > 5 is false, the program checks the condition in the elif statement and executes the corresponding block of code.\n\nThe \'else\' statement is used to execute a block of code if none of the previous conditions are true. Here\'s an example:\n\n```python\nz = 5\nif z > 5:\n    print("z is greater than 5")\nelif z < 5:\n    print("z is less than 5")\nelse:\n    print("z is equal to 5")\n```\n\nIn this example, if both the if and elif conditions are false, the code inside the else block will be executed.\n\nThese conditional statements are essential in programming as they allow us to create dynamic and responsive programs. Practice using if, elif, and else statements in your Python programs to make decisions based on different conditions.'},
           {'title': 'Loops and iterations',
            'content': "In Python, loops are used to execute a block of code multiple times. This is helpful when you need to perform a repetitive task without writing the same code over and over again. There are two main types of loops in Python: for loops and while loops.\n\n**For Loops:**\nA for loop is used when you know the number of times you want to repeat a block of code. It iterates over a sequence of elements (like a list or a range of numbers) and executes the block of code for each element in the sequence.\n\nHere's an example of a simple for loop in Python that prints numbers from 1 to 5:\n\n```python\nfor i in range(1, 6):  # range function generates numbers from 1 to 5\n    print(i)\n```\n\nIn this example, the `range(1, 6)` function generates numbers from 1 to 5 (inclusive) and the for loop iterates over each number and prints it.\n\n**While Loops:**\nA while loop is used when you don't know beforehand how many times you need to repeat a block of code. It continues to execute the block of code as long as a certain condition is true.\n\nHere's an example of a simple while loop in Python that prints numbers from 1 to 5:\n\n```python\ni = 1\nwhile i <= 5:\n    print(i)\n    i += 1\n```\n\nIn this example, the while loop checks if the variable `i` is less than or equal to 5. If the condition is true, it prints the value of `i` and increments `i` by 1. This process continues until `i` becomes greater than 5.\n\nLoops are powerful tools in Python that allow you to automate repetitive tasks and iterate over data structures. By mastering loops and iterations, you can make your code more efficient and concise. Practice using loops with different examples to improve your understanding and programming skills."},
           {'title': 'Exception handling',
            'content': 'In Python, exception handling is a way to deal with errors that may occur during the execution of your code. When an error occurs, an exception is raised, and if it is not handled properly, it can cause your program to crash.\n\nTo handle exceptions in Python, you can use the try and except blocks. The try block contains the code that you want to run, and the except block contains the code that will handle the exception if one is raised.\n\nHere\'s a simple example to demonstrate how exception handling works:\n\n```python\ntry:\n    number = int(input("Enter a number: "))\n    result = 10 / number\n    print("Result: ", result)\nexcept ZeroDivisionError:\n    print("Error: Cannot divide by zero")\nexcept ValueError:\n    print("Error: Please enter a valid number")\n```\n\nIn this example, the code inside the try block prompts the user to enter a number, then tries to divide 10 by that number. If the user enters 0, a ZeroDivisionError will be raised, and the code inside the corresponding except block will be executed. If the user enters a non-numeric value, a ValueError will be raised, and the code inside the other except block will be executed.\n\nYou can also use a single except block to catch all types of exceptions:\n\n```python\ntry:\n    number = int(input("Enter a number: "))\n    result = 10 / number\n    print("Result: ", result)\nexcept Exception as e:\n    print("An error occurred:", e)\n```\n\nIn this example, the code inside the except block will catch any type of exception that is raised and print out the error message.\n\nBy using exception handling in your Python programs, you can gracefully handle errors and prevent your program from crashing. Practice writing try-except blocks and experiment with different types of errors to better understand how exception handling works.'}]},
         {'section_title': 'Functions in Python',
          'subsections': [{'title': 'Defining functions',
            'content': 'In Python, functions are like mini-programs within a larger program. They are blocks of code that perform a specific task and can be reused multiple times in your code. Defining functions in Python is a fundamental concept that will help you write more organized and efficient code.\n\nTo define a function in Python, you start with the `def` keyword, followed by the name of the function and parentheses that may contain parameters. Parameters are like placeholders that allow you to pass information into the function. The function block is indented, and it contains the code that will be executed when the function is called.\n\nHere is a simple example of defining a function in Python:\n\n```python\ndef greet():\n    print("Hello, welcome to Python Programming Fundamentals!")\n```\n\nIn this example, we defined a function called `greet` that prints out a welcome message. To call this function and see the message, you simply write `greet()` in your code.\n\nYou can also define functions with parameters to make them more versatile. Parameters are variables that are passed into the function when it is called. Here is an example:\n\n```python\ndef greet_user(name):\n    print(f"Hello, {name}, welcome to Python Programming Fundamentals!")\n```\n\nIn this example, the `greet_user` function takes a `name` parameter, which is used to personalize the greeting message. To call this function with a specific name, you would write `greet_user("Alice")`.\n\nDefining functions in Python is a powerful way to break down your code into smaller, manageable pieces. It allows you to write reusable code that can be easily maintained and modified. As you continue to learn Python, understanding how to define and use functions will be essential in writing efficient and readable code.'},
           {'title': 'Function arguments and return values',
            'content': 'In Python, functions are reusable blocks of code that perform a specific task. They help in organizing and structuring your code, making it easier to read and maintain. When you define a function, you can specify parameters that the function can accept, perform some operations, and optionally return a value.\n\n### Function Arguments\nFunction arguments are the values that are passed to a function when it is called. They are specified within the parentheses of the function definition. You can define a function with or without arguments.\n\nHere is an example of a function that takes two arguments, adds them together, and returns the result:\n```python\ndef add_numbers(num1, num2):\n    sum = num1 + num2\n    return sum\n\nresult = add_numbers(5, 3)\nprint(result)  # Output: 8\n```\n\nIn this example, `num1` and `num2` are the arguments passed to the function `add_numbers`. When the function is called with `add_numbers(5, 3)`, it adds `5` and `3` together, and returns the result which is then printed.\n\n### Return Values\nFunctions in Python can optionally return a value using the `return` statement. This allows you to pass data back to the code that called the function. If a function does not have a return statement, it automatically returns `None`.\n\nHere is an example of a function that returns a value:\n```python\ndef square_number(num):\n    return num * num\n\nresult = square_number(4)\nprint(result)  # Output: 16\n```\n\nIn this example, the function `square_number` takes a number as an argument, squares it, and returns the result. When the function is called with `square_number(4)`, it returns `16`, which is then printed.\n\nUnderstanding function arguments and return values is crucial in Python programming as they allow you to create modular and reusable code. Experiment with different functions and arguments to get a better grasp of how they work.'},
           {'title': 'Lambda functions',
            'content': "Lambda functions, also known as anonymous functions, are a compact way to define small, one-line functions in Python. Unlike regular functions defined using the `def` keyword, lambda functions are defined using the `lambda` keyword. \n\nThe syntax of a lambda function is as follows:\n```python\nlambda arguments: expression\n```\n\nLambda functions can take any number of arguments, but they can only have one expression. This expression is evaluated and returned when the lambda function is called.\n\nLet's look at a simple example:\n\n```python\n# Regular function\ndef square(x):\n    return x * x\n\nprint(square(5))  # Output: 25\n\n# Equivalent lambda function\nsquare_lambda = lambda x: x * x\n\nprint(square_lambda(5))  # Output: 25\n```\n\nIn this example, we defined a regular function `square` using the `def` keyword and an equivalent lambda function `square_lambda`. Both functions calculate the square of a number `x`, but the lambda function is more concise.\n\nLambda functions are commonly used when you need a simple function for a short period of time, for example, as arguments to higher-order functions like `map`, `filter`, and `sort`.\n\nLet's see an example of using a lambda function with the `map` function to double each element in a list:\n\n```python\nnumbers = [1, 2, 3, 4, 5]\ndoubled_numbers = list(map(lambda x: x * 2, numbers))\n\nprint(doubled_numbers)  # Output: [2, 4, 6, 8, 10]\n```\n\nIn this example, we used a lambda function to define the doubling logic and passed it as an argument to the `map` function, which applied the lambda function to each element in the `numbers` list.\n\nRemember that lambda functions are best suited for simple, short functions. For more complex logic, it is recommended to use regular named functions defined with the `def` keyword."}]}]}



}




const API_URL = "http://127.0.0.1:8004";

export const getRecommendedCourses = async () => {
  const token = localStorage.getItem("access_token");

  if (!token) {
    throw new Error("Access token not found. Please log in.");
  }

  const response = await fetch(`${API_URL}/courses`, {
    headers: {
      Authorization: `Bearer ${token}`,
    },
  });

  if (!response.ok) {
    const error = await response.json();
    throw new Error(error.detail || "Failed to fetch recommended courses");
  }

  const data = await response.json();

  // Map API response to frontend-friendly format
  return data.map((course) => ({
    id: course.id,
    title: course.course_title,
    description: course.course_description,
    duration: 40, // placeholder, or get from API if available
    difficulty: course.course_level,
  }));
};



export const fetchCourseById = async (courseId) => {
    const token = localStorage.getItem("access_token");
  
    if (!token) {
      throw new Error("Access token not found. Please log in.");
    }
  
    const response = await fetch(`${API_URL}/courses/${courseId}`, {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    });
  
    if (!response.ok) {
      const error = await response.json();
      throw new Error(error.detail || "Failed to fetch course");
    }
  
    const data = await response.json();
    return data;  // This should match your expected courseData structure
  };